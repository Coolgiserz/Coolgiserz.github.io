<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 | CoolCats</title>
    <link>/tag/%E6%B5%8B%E8%AF%95/</link>
      <atom:link href="/tag/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <description>测试</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 09 Mar 2020 20:20:57 +0800</lastBuildDate>
    <image>
      <url>/media/icon_hue03491371183284312b8b116a73ae5ab_79511_512x512_fill_lanczos_center_3.png</url>
      <title>测试</title>
      <link>/tag/%E6%B5%8B%E8%AF%95/</link>
    </image>
    
    <item>
      <title>认识数据驱动的测试</title>
      <link>/post/data-driven-testing-for-starter/</link>
      <pubDate>Mon, 09 Mar 2020 20:20:57 +0800</pubDate>
      <guid>/post/data-driven-testing-for-starter/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前的文章简单介绍了&lt;a href=&#34;../automated-testing-startup/&#34;&gt;自动化测试&lt;/a&gt;，在自动化测试平台中，有一个重要的组件或概念称为“数据驱动的测试（Data Driven Tests， DDT）”，其目的是将测试脚本与测试数据分离，本质上是测试逻辑的解耦，使得测试流程的代码编写与测试过程中所使用的数据/用例设计可以分别进行。&lt;/p&gt;
&lt;p&gt;数据驱动的测试解决了如下痛点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于同一份测试代码，测试数据可能会发生大量变化，如果测试数据与代码耦合可能会为代码维护带来不必要的麻烦或增加不必要的代码编写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;框架&#34;&gt;框架&lt;/h3&gt;
&lt;p&gt;以基于Python语言的&lt;a href=&#34;https://ddt.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DDT&lt;/a&gt;框架为例介绍DDT的主要模块功能与模块关系。&lt;/p&gt;
&lt;p&gt;DDT主要有三大部件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据源&lt;/p&gt;
&lt;p&gt;csv、excel、json、xml等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据加载脚本&lt;/p&gt;
&lt;p&gt;将数据源读取到内存中（特定的数据结构）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试脚本&lt;/p&gt;
&lt;p&gt;读取数据变量，进行测试，保存测试信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>初步认识自动化测试</title>
      <link>/post/automated-testing-startup/</link>
      <pubDate>Fri, 20 Dec 2019 13:36:16 +0800</pubDate>
      <guid>/post/automated-testing-startup/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;前段时间的参与了自动化测试平台的开发，本文就进行一些梳理，简单总结以下要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要自动化测试？&lt;/li&gt;
&lt;li&gt;如何实现自动化测试？&lt;/li&gt;
&lt;li&gt;如何基于Jenkins实现持续集成？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么要自动化测试&#34;&gt;为什么要自动化测试？&lt;/h3&gt;
&lt;p&gt;在一个产品的开发流程中往往会涉及到产品经理、开发团队、测试团队等团队的协作，一般情况下是开发拿到产品需求之后进行开发工作，开发完毕之后给测试团队根据一系列的测试方案指标对软件/程序进行一系列的测试（功能测试、性能测试、安全测试、部署测试等等），如果测试团队确认没有问题那么就可以进行版本的发布，如果有bug则要让开发团队修补，直到没有bug再正式部署。
这个过程中开发与测试的沟通对接次数可能是非常多的，项目排期很紧的时候，测试可能经常需要等开发“修完”bug，这个过程或许还要经常（不情愿地）陪着开发团队加班；而开发团队在“修完”bug之后也要“提心吊胆”地等待测试团队的结果。&lt;/p&gt;
&lt;p&gt;这时候人们就想：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能不能事先写一个系统，里面包含了设计好的测试用例，等开发完上传代码之后系统会自动拉取代码进行构建，然后即时生成测试报告返回给开发团队？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是自动化测试所考虑的问题，总结一下，自动化测试所要解决的痛点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对测试人员：将测试人员从大多数简单而重复性高的测试工作解放出来，更多关注业务逻辑&lt;/li&gt;
&lt;li&gt;针对开发人员：写完了代码之后可以直接获取测试报告，没通过就直接改，通过了就做下一个需求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何实现自动化测试&#34;&gt;如何实现自动化测试？&lt;/h3&gt;
&lt;p&gt;要实现自动化测试，首先要知道一个项目从需求期到上线要经过什么流程：需求分析、设计、开发、测试、上线。而对于团队型的开发而言，往往会涉及到代码的集成（如将多个分支的代码集成到主分支中）、交付（开发将新版本软件交付给测试团队或者用户）、部署（确保代码质量后将软件上线，投入使用）。所谓的自动化，就可以从“集成”、“交付”、“部署”处着手，考虑如何提高这几个环节的效率。&lt;/p&gt;
&lt;p&gt;于是就有人提出了持续集成、持续交付、持续部署之类的概念。&lt;/p&gt;
&lt;p&gt;或许你已经在哪里见过CI/CD、DevOps的术语，所谓CI/CD，分别指持续集成（Continuous integration）、持续交付（Continuous Delivery）和持续部署（Continuous Deployment）。其含义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;持续集成：频繁地将代码集成到主干分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;持续交付：频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;持续部署：代码通过评审以后，自动部署到生产环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps: 通过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关键之处，就是在项目开发过程中，实现高度持续的自动化与监控，尽可能减少由于人员交接所带来的效率损失。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/automated-testing-startup/images/fig1_huc8fb813a2a1073acbc8c445fda94c81c_108164_e531c188662c0335c179d4ee88bbc9e0.webp 400w,
               /post/automated-testing-startup/images/fig1_huc8fb813a2a1073acbc8c445fda94c81c_108164_277eea6068241e111149792aacfc44b1.webp 760w,
               /post/automated-testing-startup/images/fig1_huc8fb813a2a1073acbc8c445fda94c81c_108164_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;/post/automated-testing-startup/images/fig1_huc8fb813a2a1073acbc8c445fda94c81c_108164_e531c188662c0335c179d4ee88bbc9e0.webp&#34;
               width=&#34;760&#34;
               height=&#34;173&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;疑问&#34;&gt;疑问&lt;/h3&gt;
&lt;p&gt;当然，在面对自动化测试的时候，你可能还会考虑如下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有项目都适合自动化测试吗？什么样的项目/功能/接口可以进行自动化测试？&lt;/li&gt;
&lt;li&gt;自动化测试所耗费的时间与金钱成本值得承受吗？会给我们带来多大的效率提升？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里先忽略这些问题，假设项目可以进行自动化测试，并简单分析其中的持续集成模块。&lt;/p&gt;
&lt;h2 id=&#34;持续集成&#34;&gt;持续集成&lt;/h2&gt;
&lt;p&gt;要做到持续集成，需要实现如下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;监测开发分支是否有更改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若分支有变化，则自动拉取变化的代码，进行如下操作：&lt;/p&gt;
&lt;p&gt;(1) 尝试进行构建&lt;/p&gt;
&lt;p&gt;(2) 若构建成功则运行测试用例，包括单元测试和业务逻辑测试&lt;/p&gt;
&lt;p&gt;(3) 通知开发者构建结果和测试结果（可以是邮件发送测试报告），并进行日志记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发分支通过测试则尝试进行集成&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CI的工作流可以如下图所示：
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/automated-testing-startup/images/ci_huc0289b525ea73dd66f73d66e09f056e4_211874_5b3df4f070a7dc3249c107a2f1d07cb6.webp 400w,
               /post/automated-testing-startup/images/ci_huc0289b525ea73dd66f73d66e09f056e4_211874_51f73c72f4a0488bee2267b3c2b62a9f.webp 760w,
               /post/automated-testing-startup/images/ci_huc0289b525ea73dd66f73d66e09f056e4_211874_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;/post/automated-testing-startup/images/ci_huc0289b525ea73dd66f73d66e09f056e4_211874_5b3df4f070a7dc3249c107a2f1d07cb6.webp&#34;
               width=&#34;760&#34;
               height=&#34;470&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;比较著名的持续集成工具有&lt;a href=&#34;https://www.jenkins.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jenkins&lt;/a&gt;、&lt;a href=&#34;https://github.com/travis-ci/travis-ci&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Travis CI&lt;/a&gt;、&lt;a href=&#34;https://buddy.works/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buddy&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;以Jenkins为例, Jenkins是由Java编写的开源持续集成工具，且已经提供多种语言的接口（C/C++、Python、PHP、Android等），具有如下特点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;易安装。通过Jenkins.war包进行直接运行，无需安装，无需数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易扩展。可以在线更新插件，也可以自己开发插件，现有的插件库已经比较丰富能够满足大多数需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持分布式构建。主从方式使jenkins能够让多台计算机同时工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建前、构建后可定义自己要进行的操作。比如添加代码扫描或者安全扫描，构建完成通过邮件/RSS等通讯工具实时告知构建结果，可以更方便把控产品质量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以python接口为例，通过jenkins实现任务构建管理的基本逻辑如下：
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/automated-testing-startup/images/jenkins_build_hu0bb8539fbb06c6e778abdc71f21a2928_556219_04454082b2657124f1a00c32b55e7e6b.webp 400w,
               /post/automated-testing-startup/images/jenkins_build_hu0bb8539fbb06c6e778abdc71f21a2928_556219_8ed73e4aeb5b5696daa5636ffd8de744.webp 760w,
               /post/automated-testing-startup/images/jenkins_build_hu0bb8539fbb06c6e778abdc71f21a2928_556219_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;/post/automated-testing-startup/images/jenkins_build_hu0bb8539fbb06c6e778abdc71f21a2928_556219_04454082b2657124f1a00c32b55e7e6b.webp&#34;
               width=&#34;760&#34;
               height=&#34;512&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文对于自动化测试这么大的题目而言，所述甚微，也不涉及技术细节，更多关于持续交付、部署的内容日后补充。&lt;/p&gt;
&lt;p&gt;回到一开始所提的两个疑问。&lt;/p&gt;
&lt;p&gt;首先，什么样的项目适合进行自动化测试？&lt;/p&gt;
&lt;p&gt;要测试的对象包括单个接口、性能、安全、业务逻辑、易用性等等，我们知道&lt;strong&gt;执行频率高且机械化的重复操作&lt;/strong&gt;肯定是适合自动化测试的，这里包括对那些用户交互性要求较弱的接口进行单元测试、性能测试、大量数据输入测试、配置测试等。对于那些用户交互要求高的功能，比如涉及复杂业务规则，涉及感官（视觉、听觉）测试，涉及物理交互（刷卡、打印等）的功能自动化测试就很难实施或者说实施成本过高而没有必要了。&lt;/p&gt;
&lt;p&gt;再者，有必要建设自动化测试平台吗？是否真的能够带来效率提升？什么情况下才能有效率提升？&lt;/p&gt;
&lt;p&gt;这实际上是一个投资与回报的权衡问题。建设自动化平台是需要很大成本的：组建一个测试开发团队、设计测试架构、多个团队配合开发自动化平台、将现有业务代码接入自动化平台、……。如果没有足够多的业务线，足够多的需求（可以带来产出），建设自动化测试平台或许就只是杀鸡用牛刀，但如果说有足够的业务场景支撑，那么多组建一个测开团队整一个自动化平台可以造福多个开发团队，在长期发展中获得回报。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.redhat.com/zh/topics/devops/what-is-ci-cd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CI/CD是什么？如何理解持续集成、持续交付和持续部署&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2017/09/06/continuous-integration-a-typical-process/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Continuous Integration: A “Typical” Process&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jenkins.io/zh/doc/tutorials/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jenkins官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/23444990&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何理解持续集成、持续交付、持续部署？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
