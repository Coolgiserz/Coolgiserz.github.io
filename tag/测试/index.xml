<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 | NullSpace</title>
    <link>https://spacetimelab.cn/tag/%E6%B5%8B%E8%AF%95/</link>
      <atom:link href="https://spacetimelab.cn/tag/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <description>测试</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 31 Jul 2023 23:15:54 +0800</lastBuildDate>
    <image>
      <url>https://spacetimelab.cn/media/icon_hue03491371183284312b8b116a73ae5ab_79511_512x512_fill_lanczos_center_3.png</url>
      <title>测试</title>
      <link>https://spacetimelab.cn/tag/%E6%B5%8B%E8%AF%95/</link>
    </image>
    
    <item>
      <title>思考：如何测试一个游戏？</title>
      <link>https://spacetimelab.cn/post/game-testing-thinking/</link>
      <pubDate>Mon, 31 Jul 2023 23:15:54 +0800</pubDate>
      <guid>https://spacetimelab.cn/post/game-testing-thinking/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;测试的目的是寻找产品缺陷，最终提高产品的质量。对于游戏而言，与一般软件不同的是，当用户在使用游戏软件时时，往往会在一段时间内沉浸式地与软件进行细致地交互（假设游戏对用户有吸引力），因此需要测试游戏的流畅度、控制的灵敏度，各种硬件配置环境测试游戏，如果是多人对战游戏还需要关注游戏角色、能力的平衡性。总的来说，游戏测试包括但不限于如下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;性能，游戏响应时间如何？游戏服务延时率是否不可接受？网络延迟时玩家会面临什么？服务器最高可容纳什么样的并发量（负载）？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全问题，玩家的账号是否安全？充值的点券、购买的装备、英雄是否会按时到账会丢失？不同玩家之间是否可能越权操作？玩家在wifi环境下登录游戏是否可能泄露隐私信息（数据传输过程是否加密，加密程度如何）？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能方面，是否所有设计的按钮、操作、技能、社交都能按预期执行？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兼容性方面，游戏在所有目标平台上是否可以正常运行，包括不同的操作系统、设备型号、硬件配置以及不同的网络环境等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户交互测试，用户界面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;合规性方面，游戏各方面元素是否符合相关法规要求，如隐私、年龄、版权等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可玩性方面，较为主观，但需要有人试玩并对游戏剧情、战斗等维度的可玩性做出评价，至少能从目标用户群体的采样测试人员得到普遍较高的评价（可设计一套评分体系）才能认为游戏可玩性较高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地化方面，假如游戏支持多语言或者有国际化版本，需考虑对应国家、语言的版本的本地化支持是否正常（文本是否被正确翻译、界面是否符合当地习俗、输入输出是否与目标地区的习惯一致、时间货币的数值显示是否符合目标地区的习惯等）。需要考虑不同地区的用户连接游戏服务时能否得到及时的响应和正确的回复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果从流程化的角度考虑游戏测试，还需要注意对游戏质量总体情况进行定量化度量，如测试覆盖率、错误数量、功能不达标率等，也要注意对用户反馈的正面与否进行统计。&lt;/p&gt;
&lt;h2 id=&#34;非技术层面&#34;&gt;非技术层面&lt;/h2&gt;
&lt;h3 id=&#34;如何测试游戏可玩性&#34;&gt;如何测试游戏可玩性&lt;/h3&gt;
&lt;p&gt;定义测试目标、选择测试用户、观察和记录、量化和分析。这部分的测试可能略微主观，对于完全不喜欢某一游戏类型的玩家而言，让ta来测试这类游戏，得到的反馈可能是极差的，也不一定具有参考意义。&lt;/p&gt;
&lt;h3 id=&#34;如何测试游戏平衡性&#34;&gt;如何测试游戏平衡性&lt;/h3&gt;
&lt;p&gt;测试平衡性的前提是明确“平衡”的标准，所有的阵营或角色有相等的机会获胜？所有同职业角色的技能及属性强度在一个合适的统一量化标准中相差不能很大；&lt;/p&gt;
&lt;p&gt;收集和分析数据进行统计分析以评估游戏的平衡性：死亡次数、胜利次数、得分等。&lt;/p&gt;
&lt;p&gt;数据从何而来？以《王者荣耀》为例，假如要测试一个新上线的英雄是否会强度适当，可以进行如下测试（平衡性测试）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内部测试，如让设计师、开发者、测试员使用新英雄与已存在的英雄进行对战&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;玩家反馈：在测试服引入新英雄，收集和分析玩家的反馈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;迭代调整：根据测试结果和玩家反馈进行新英雄的数值迭代调整（如何合理地调整？）&lt;/p&gt;
&lt;p&gt;以老英雄，公认为强度适中（不过弱也不超标）的老英雄的数值统计结果作为参考，调整新英雄的初始属性和成长速度、成长属性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，平衡性有时不只看单个英雄的数值，还要看其与其他特定英雄搭配后的强度（多种玩法组合下的强度）。&lt;/p&gt;
&lt;h3 id=&#34;对合对游戏内容合规性和准确性进行测试&#34;&gt;对合对游戏内容合规性和准确性进行测试&lt;/h3&gt;
&lt;p&gt;人工审查&lt;/p&gt;
&lt;h3 id=&#34;如何对国际化和本地化进行测试&#34;&gt;如何对国际化和本地化进行测试&lt;/h3&gt;
&lt;p&gt;人工审查、自动化测试&lt;/p&gt;
&lt;h3 id=&#34;如何对视觉效果和音乐效果进行测试&#34;&gt;如何对视觉效果和音乐效果进行测试&lt;/h3&gt;
&lt;p&gt;能否自动化测试？如果实现自动化的话，投入产出比是怎样的？&lt;/p&gt;
&lt;h2 id=&#34;技术层面&#34;&gt;技术层面&lt;/h2&gt;
&lt;h3 id=&#34;如何测试网络性能&#34;&gt;如何测试网络性能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过负载测试工具，模拟大数量级的并发用户执行游戏操作接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模拟弱网环境、各种网络环境(4G/5G/Wifi)及网络环境切换时的游戏表现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何测试兼容性&#34;&gt;如何测试兼容性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设备型号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统（Android/IOS）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何测试安全性&#34;&gt;如何测试安全性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户账号安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户交易安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络协议安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络接口安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;权限安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外挂检测&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对玩过的一些游戏进行评价&#34;&gt;对玩过的一些游戏进行评价&lt;/h2&gt;
&lt;h3 id=&#34;塞尔达传说旷野之息&#34;&gt;《塞尔达传说：旷野之息》&lt;/h3&gt;
&lt;h4 id=&#34;整体评价&#34;&gt;整体评价&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;开放世界&lt;/strong&gt;角色扮演游戏，剧情丰富、3D建模、现实环境模拟细致、动作设计富含细节，神庙（&lt;strong&gt;解谜、迷宫&lt;/strong&gt;）具有趣味性和挑战性。&lt;/p&gt;
&lt;p&gt;道具的丰富性结合&lt;strong&gt;物理和化学原理&lt;/strong&gt;可以衍生出很多玩法，比如要战胜怪物可以靠肉搏技巧，也可以靠策略（陷阱），还可以靠吃药升级装备增强作战能力。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;火、电、冰元素的装备、怪物、料理等；游戏世界中丰富的材料、生物等；
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;不足之处&#34;&gt;不足之处&lt;/h4&gt;
&lt;p&gt;游戏的战斗技巧单一，长时间玩下去可能会觉得单调，如各种人马的战斗模式基本是固定的，熟悉以后就可预测，并可以相对固定的套路应对。（虽然大师模式的怪物加入回复机制，对玩家而言也有不少挑战）&lt;/p&gt;
&lt;p&gt;物理、化学原理的可利用方式还是较少。林克的滑翔伞无法被打破或燃烧&lt;/p&gt;
&lt;p&gt;战斗反应时间较多，更换武器或弓箭时可以暂停战斗。&lt;/p&gt;
&lt;h3 id=&#34;王者荣耀&#34;&gt;《王者荣耀》&lt;/h3&gt;
&lt;h4 id=&#34;整体评价-1&#34;&gt;整体评价&lt;/h4&gt;
&lt;p&gt;多人在线团队竞技游戏&lt;/p&gt;
&lt;h4 id=&#34;不足之处-1&#34;&gt;不足之处&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;匹配机制无语&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地图复杂度不够&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试工具&#34;&gt;测试工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://appium.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Appium&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.selenium.dev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Selenium&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LoadRunner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JMeter&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;游戏测试案例及问题思考&#34;&gt;游戏测试案例及问题思考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://toutiao.io/posts/h14lscl/preview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;## 王者荣耀是怎么测试的？——『上海站议题』游戏质量篇&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假如让你测试《王者荣耀》中一个新英雄，你会从哪些方面进行思考和设计测试方案？&lt;/p&gt;
&lt;p&gt;1、界面：人物模型及动作、特效是否符合设计原型&lt;/p&gt;
&lt;p&gt;2、功能：各项技能及组合技、被动属性及特性是否符合设计规格&lt;/p&gt;
&lt;p&gt;3、平衡：数值是否明显偏弱或过强&lt;/p&gt;
&lt;p&gt;4、活动：产出手段、途径（商城直售、活动领取）是否符合预期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;不管是技术层面测试还是非技术层面的测试，明确测试目标（方案）、定义测试场景，以量化的形式表示游戏质量是很重要的。考虑软件架构层面，还要尤其考虑用户体验，一点缺陷可能就会带来用户流失和利益亏损。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>认识数据驱动的测试</title>
      <link>https://spacetimelab.cn/post/data-driven-testing-for-starter/</link>
      <pubDate>Mon, 09 Mar 2020 20:20:57 +0800</pubDate>
      <guid>https://spacetimelab.cn/post/data-driven-testing-for-starter/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前的文章简单介绍了&lt;a href=&#34;../automated-testing-startup/&#34;&gt;自动化测试&lt;/a&gt;，在自动化测试平台中，有一个重要的组件或概念称为“数据驱动的测试（Data Driven Tests， DDT）”，其目的是将测试脚本与测试数据分离，本质上是测试逻辑的解耦，使得测试流程的代码编写与测试过程中所使用的数据/用例设计可以分别进行。&lt;/p&gt;
&lt;p&gt;数据驱动的测试解决了如下痛点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于同一份测试代码，测试数据可能会发生大量变化，如果测试数据与代码耦合可能会为代码维护带来不必要的麻烦或增加不必要的代码编写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;框架&#34;&gt;框架&lt;/h3&gt;
&lt;p&gt;以基于Python语言的&lt;a href=&#34;https://ddt.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DDT&lt;/a&gt;框架为例介绍DDT的主要模块功能与模块关系。&lt;/p&gt;
&lt;p&gt;DDT主要有三大部件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据源&lt;/p&gt;
&lt;p&gt;csv、excel、json、xml等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据加载脚本&lt;/p&gt;
&lt;p&gt;将数据源读取到内存中（特定的数据结构）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试脚本&lt;/p&gt;
&lt;p&gt;读取数据变量，进行测试，保存测试信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>初步认识自动化测试</title>
      <link>https://spacetimelab.cn/post/automated-testing-startup/</link>
      <pubDate>Fri, 20 Dec 2019 13:36:16 +0800</pubDate>
      <guid>https://spacetimelab.cn/post/automated-testing-startup/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;前段时间的参与了自动化测试平台的开发，本文就进行一些梳理，简单总结以下要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么要自动化测试？&lt;/li&gt;
&lt;li&gt;如何实现自动化测试？&lt;/li&gt;
&lt;li&gt;如何基于Jenkins实现持续集成？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么要自动化测试&#34;&gt;为什么要自动化测试？&lt;/h3&gt;
&lt;p&gt;在一个产品的开发流程中往往会涉及到产品经理、开发团队、测试团队等团队的协作，一般情况下是开发拿到产品需求之后进行开发工作，开发完毕之后给测试团队根据一系列的测试方案指标对软件/程序进行一系列的测试（功能测试、性能测试、安全测试、部署测试等等），如果测试团队确认没有问题那么就可以进行版本的发布，如果有bug则要让开发团队修补，直到没有bug再正式部署。
这个过程中开发与测试的沟通对接次数可能是非常多的，项目排期很紧的时候，测试可能经常需要等开发“修完”bug，这个过程或许还要经常（不情愿地）陪着开发团队加班；而开发团队在“修完”bug之后也要“提心吊胆”地等待测试团队的结果。&lt;/p&gt;
&lt;p&gt;这时候人们就想：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;能不能事先写一个系统，里面包含了设计好的测试用例，等开发完上传代码之后系统会自动拉取代码进行构建，然后即时生成测试报告返回给开发团队？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是自动化测试所考虑的问题，总结一下，自动化测试所要解决的痛点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对测试人员：将测试人员从大多数简单而重复性高的测试工作解放出来，更多关注业务逻辑&lt;/li&gt;
&lt;li&gt;针对开发人员：写完了代码之后可以直接获取测试报告，没通过就直接改，通过了就做下一个需求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何实现自动化测试&#34;&gt;如何实现自动化测试？&lt;/h3&gt;
&lt;p&gt;要实现自动化测试，首先要知道一个项目从需求期到上线要经过什么流程：需求分析、设计、开发、测试、上线。而对于团队型的开发而言，往往会涉及到代码的集成（如将多个分支的代码集成到主分支中）、交付（开发将新版本软件交付给测试团队或者用户）、部署（确保代码质量后将软件上线，投入使用）。所谓的自动化，就可以从“集成”、“交付”、“部署”处着手，考虑如何提高这几个环节的效率。&lt;/p&gt;
&lt;p&gt;于是就有人提出了持续集成、持续交付、持续部署之类的概念。&lt;/p&gt;
&lt;p&gt;或许你已经在哪里见过CI/CD、DevOps的术语，所谓CI/CD，分别指持续集成（Continuous integration）、持续交付（Continuous Delivery）和持续部署（Continuous Deployment）。其含义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;持续集成：频繁地将代码集成到主干分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;持续交付：频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;持续部署：代码通过评审以后，自动部署到生产环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps: 通过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关键之处，就是在项目开发过程中，实现高度持续的自动化与监控，尽可能减少由于人员交接所带来的效率损失。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/automated-testing-startup/images/fig1_huc8fb813a2a1073acbc8c445fda94c81c_108164_e531c188662c0335c179d4ee88bbc9e0.webp 400w,
               /post/automated-testing-startup/images/fig1_huc8fb813a2a1073acbc8c445fda94c81c_108164_277eea6068241e111149792aacfc44b1.webp 760w,
               /post/automated-testing-startup/images/fig1_huc8fb813a2a1073acbc8c445fda94c81c_108164_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://spacetimelab.cn/post/automated-testing-startup/images/fig1_huc8fb813a2a1073acbc8c445fda94c81c_108164_e531c188662c0335c179d4ee88bbc9e0.webp&#34;
               width=&#34;760&#34;
               height=&#34;173&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;疑问&#34;&gt;疑问&lt;/h3&gt;
&lt;p&gt;当然，在面对自动化测试的时候，你可能还会考虑如下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有项目都适合自动化测试吗？什么样的项目/功能/接口可以进行自动化测试？&lt;/li&gt;
&lt;li&gt;自动化测试所耗费的时间与金钱成本值得承受吗？会给我们带来多大的效率提升？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里先忽略这些问题，假设项目可以进行自动化测试，并简单分析其中的持续集成模块。&lt;/p&gt;
&lt;h2 id=&#34;持续集成&#34;&gt;持续集成&lt;/h2&gt;
&lt;p&gt;要做到持续集成，需要实现如下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;监测开发分支是否有更改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若分支有变化，则自动拉取变化的代码，进行如下操作：&lt;/p&gt;
&lt;p&gt;(1) 尝试进行构建&lt;/p&gt;
&lt;p&gt;(2) 若构建成功则运行测试用例，包括单元测试和业务逻辑测试&lt;/p&gt;
&lt;p&gt;(3) 通知开发者构建结果和测试结果（可以是邮件发送测试报告），并进行日志记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发分支通过测试则尝试进行集成&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CI的工作流可以如下图所示：
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/automated-testing-startup/images/ci_huc0289b525ea73dd66f73d66e09f056e4_211874_5b3df4f070a7dc3249c107a2f1d07cb6.webp 400w,
               /post/automated-testing-startup/images/ci_huc0289b525ea73dd66f73d66e09f056e4_211874_51f73c72f4a0488bee2267b3c2b62a9f.webp 760w,
               /post/automated-testing-startup/images/ci_huc0289b525ea73dd66f73d66e09f056e4_211874_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://spacetimelab.cn/post/automated-testing-startup/images/ci_huc0289b525ea73dd66f73d66e09f056e4_211874_5b3df4f070a7dc3249c107a2f1d07cb6.webp&#34;
               width=&#34;760&#34;
               height=&#34;470&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;比较著名的持续集成工具有&lt;a href=&#34;https://www.jenkins.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jenkins&lt;/a&gt;、&lt;a href=&#34;https://github.com/travis-ci/travis-ci&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Travis CI&lt;/a&gt;、&lt;a href=&#34;https://buddy.works/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buddy&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;以Jenkins为例, Jenkins是由Java编写的开源持续集成工具，且已经提供多种语言的接口（C/C++、Python、PHP、Android等），具有如下特点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;易安装。通过Jenkins.war包进行直接运行，无需安装，无需数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易扩展。可以在线更新插件，也可以自己开发插件，现有的插件库已经比较丰富能够满足大多数需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持分布式构建。主从方式使jenkins能够让多台计算机同时工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建前、构建后可定义自己要进行的操作。比如添加代码扫描或者安全扫描，构建完成通过邮件/RSS等通讯工具实时告知构建结果，可以更方便把控产品质量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以python接口为例，通过jenkins实现任务构建管理的基本逻辑如下：
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/automated-testing-startup/images/jenkins_build_hu0bb8539fbb06c6e778abdc71f21a2928_556219_04454082b2657124f1a00c32b55e7e6b.webp 400w,
               /post/automated-testing-startup/images/jenkins_build_hu0bb8539fbb06c6e778abdc71f21a2928_556219_8ed73e4aeb5b5696daa5636ffd8de744.webp 760w,
               /post/automated-testing-startup/images/jenkins_build_hu0bb8539fbb06c6e778abdc71f21a2928_556219_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://spacetimelab.cn/post/automated-testing-startup/images/jenkins_build_hu0bb8539fbb06c6e778abdc71f21a2928_556219_04454082b2657124f1a00c32b55e7e6b.webp&#34;
               width=&#34;760&#34;
               height=&#34;512&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文对于自动化测试这么大的题目而言，所述甚微，也不涉及技术细节，更多关于持续交付、部署的内容日后补充。&lt;/p&gt;
&lt;p&gt;回到一开始所提的两个疑问。&lt;/p&gt;
&lt;p&gt;首先，什么样的项目适合进行自动化测试？&lt;/p&gt;
&lt;p&gt;要测试的对象包括单个接口、性能、安全、业务逻辑、易用性等等，我们知道&lt;strong&gt;执行频率高且机械化的重复操作&lt;/strong&gt;肯定是适合自动化测试的，这里包括对那些用户交互性要求较弱的接口进行单元测试、性能测试、大量数据输入测试、配置测试等。对于那些用户交互要求高的功能，比如涉及复杂业务规则，涉及感官（视觉、听觉）测试，涉及物理交互（刷卡、打印等）的功能自动化测试就很难实施或者说实施成本过高而没有必要了。&lt;/p&gt;
&lt;p&gt;再者，有必要建设自动化测试平台吗？是否真的能够带来效率提升？什么情况下才能有效率提升？&lt;/p&gt;
&lt;p&gt;这实际上是一个投资与回报的权衡问题。建设自动化平台是需要很大成本的：组建一个测试开发团队、设计测试架构、多个团队配合开发自动化平台、将现有业务代码接入自动化平台、……。如果没有足够多的业务线，足够多的需求（可以带来产出），建设自动化测试平台或许就只是杀鸡用牛刀，但如果说有足够的业务场景支撑，那么多组建一个测开团队整一个自动化平台可以造福多个开发团队，在长期发展中获得回报。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.redhat.com/zh/topics/devops/what-is-ci-cd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CI/CD是什么？如何理解持续集成、持续交付和持续部署&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2017/09/06/continuous-integration-a-typical-process/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Continuous Integration: A “Typical” Process&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jenkins.io/zh/doc/tutorials/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jenkins官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/23444990&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何理解持续集成、持续交付、持续部署？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
