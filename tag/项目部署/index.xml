<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目部署 | CoolCats</title>
    <link>/tag/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</link>
      <atom:link href="/tag/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/index.xml" rel="self" type="application/rss+xml" />
    <description>项目部署</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 02 Nov 2023 02:13:38 +0800</lastBuildDate>
    <image>
      <url>/media/icon_hue03491371183284312b8b116a73ae5ab_79511_512x512_fill_lanczos_center_3.png</url>
      <title>项目部署</title>
      <link>/tag/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</link>
    </image>
    
    <item>
      <title>Django项目容器化部署基本方法</title>
      <link>/post/django-project-deployed-by-docker/</link>
      <pubDate>Thu, 02 Nov 2023 02:13:38 +0800</pubDate>
      <guid>/post/django-project-deployed-by-docker/</guid>
      <description>&lt;h3 id=&#34;django项目容器化编写dockerfile&#34;&gt;Django项目容器化（编写Dockerfile）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; python:3.8&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ENV&lt;/span&gt; PYTHONUNBUFFERED &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/code/search_association&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; /root/code/search_association&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; pip install pip -U&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; requirements.txt /root/code/&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; pip install -r ../requirements.txt&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ADD&lt;/span&gt; ./search_association /root/code&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上Dockerfile内容声明了Docker要完成的事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;拉取具有python3.8版本的linux镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置Python环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行命令，在容器内创建相关目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置容器内工作目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装python包管理工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将宿主机的文件添加到容器的指定目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行命令安装依赖环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将本地代码文件添加到容器中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/django-project-deployed-by-docker/images/docker-search-asso_hu604e4e7e7e7fc1cd2cc4f1ef1d678119_314727_042ab1fb555058eecce266ab757f6ed2.webp 400w,
               /post/django-project-deployed-by-docker/images/docker-search-asso_hu604e4e7e7e7fc1cd2cc4f1ef1d678119_314727_a3c22b2d6191eb515bc8fd32ee380dde.webp 760w,
               /post/django-project-deployed-by-docker/images/docker-search-asso_hu604e4e7e7e7fc1cd2cc4f1ef1d678119_314727_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;/post/django-project-deployed-by-docker/images/docker-search-asso_hu604e4e7e7e7fc1cd2cc4f1ef1d678119_314727_042ab1fb555058eecce266ab757f6ed2.webp&#34;
               width=&#34;760&#34;
               height=&#34;355&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;容器编排&#34;&gt;容器编排&lt;/h3&gt;
&lt;p&gt;举个例子，我要将一个后端项目通过容器的形式部署，其中可能涉及到django、mysql、nginx等多个服务，这些服务可能都需要容器化，那么如何统一管理一个应用的多个容器呢？这就是容器编排需要解决的问题。&lt;/p&gt;
&lt;p&gt;docker-compose用于定义和运行具有多个Docker容器的应用程序工具，通过yaml文件配置应用的服务。详见官网&lt;a href=&#34;https://docs.docker.com/compose/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Compose overview | Docker Docs&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;docker-compose配置&#34;&gt;docker-compose配置&lt;/h4&gt;
&lt;p&gt;比如我需要将django容器编排到应用中，就可以新建docker-compose.yml，配置容器相关信息，如容器应用名app对应配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;network_mode&lt;/p&gt;
&lt;p&gt;指定的容器中的网络模式，可以是bridge（桥接模式，将局域网内的ip分配给容器）、host（主机模式，消除容器与主机的网络隔离，容器与宿主机共享网络、共用端口）&lt;/p&gt;
&lt;p&gt;在使用桥接模式时，如果需要使桥接网络上的容器与外界通信或可访问，需要配置端口映射，如下面例子将容器的8000端口映射到主机的22999端口，使外部流量可以经主机的22999端口访问容器内的服务。&lt;/p&gt;
&lt;p&gt;可以使用以下命令列举可用网络&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker network ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/django-project-deployed-by-docker/images/docker_network_ls_hu19f0b4de42d4fe6e15bfd407ea8fd421_92046_069f95138b23175e2ac27be1466d8636.webp 400w,
               /post/django-project-deployed-by-docker/images/docker_network_ls_hu19f0b4de42d4fe6e15bfd407ea8fd421_92046_59b7c492a800ec7ed91fe38ba554df73.webp 760w,
               /post/django-project-deployed-by-docker/images/docker_network_ls_hu19f0b4de42d4fe6e15bfd407ea8fd421_92046_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;/post/django-project-deployed-by-docker/images/docker_network_ls_hu19f0b4de42d4fe6e15bfd407ea8fd421_92046_069f95138b23175e2ac27be1466d8636.webp&#34;
               width=&#34;760&#34;
               height=&#34;135&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;restart&lt;/p&gt;
&lt;p&gt;容器重启后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;build&lt;/p&gt;
&lt;p&gt;指定需要编排的docker容器的Dockerfile所在目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;command&lt;/p&gt;
&lt;p&gt;指定启动容器后需要执行的命令，如下面的例子指定容器启动后在工作目录中运行以noreload模式启动django服务，服务端口为8000（容器内端口）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;volumes&lt;/p&gt;
&lt;p&gt;数据挂载，宿主机的当前目录与容器内/root/code目录建立映射&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ports&lt;/p&gt;
&lt;p&gt;端口映射，宿主机的22999映射到容器的8000,通过docker ps命令可以查看容器与宿主机的端口映射情况&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/django-project-deployed-by-docker/images/docker_port_hu1b7540bce8b6c406247a8cdb8d50ea66_72262_82b73a842796e3c8a0fe1150055ccdae.webp 400w,
               /post/django-project-deployed-by-docker/images/docker_port_hu1b7540bce8b6c406247a8cdb8d50ea66_72262_b1ea5c28df4ea1ca7ef405392a6889aa.webp 760w,
               /post/django-project-deployed-by-docker/images/docker_port_hu1b7540bce8b6c406247a8cdb8d50ea66_72262_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;/post/django-project-deployed-by-docker/images/docker_port_hu1b7540bce8b6c406247a8cdb8d50ea66_72262_82b73a842796e3c8a0fe1150055ccdae.webp&#34;
               width=&#34;760&#34;
               height=&#34;35&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;version: &lt;span class=&#34;s2&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;services:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  app:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    network_mode: &lt;span class=&#34;s2&#34;&gt;&amp;#34;bridge&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    restart: always&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    build: .&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    command: &lt;span class=&#34;s2&#34;&gt;&amp;#34;python3 manage.py runserver 0.0.0.0:8000 --noreload&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    volumes:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      - .:/root/code&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    ports:&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      - &lt;span class=&#34;s2&#34;&gt;&amp;#34;127.0.0.1:22999:8000&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      - &lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.1.2:22999:8000&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以，按照上面的配置，运行docker-compose up命令后，即可启动容器，如果容器内项目正常启动，就可以通过宿主机使用127.0.0.1:22999地址访问到容器内的django服务。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/django-project-deployed-by-docker/images/docker-compose-ex_hu8f0669f24841e3343a0d252e91b03b8e_189586_697ad63f1a989035a76059e9a85cf54c.webp 400w,
               /post/django-project-deployed-by-docker/images/docker-compose-ex_hu8f0669f24841e3343a0d252e91b03b8e_189586_6c14c42641b2dbfc48acdd0a0bc689a7.webp 760w,
               /post/django-project-deployed-by-docker/images/docker-compose-ex_hu8f0669f24841e3343a0d252e91b03b8e_189586_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;/post/django-project-deployed-by-docker/images/docker-compose-ex_hu8f0669f24841e3343a0d252e91b03b8e_189586_697ad63f1a989035a76059e9a85cf54c.webp&#34;
               width=&#34;760&#34;
               height=&#34;196&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/django-project-deployed-by-docker/images/docker-compose-ex1_hu9a03798a3e841d0697f0b226e0748e9f_74667_7facddb9863a97b78f5f7c2e912a258d.webp 400w,
               /post/django-project-deployed-by-docker/images/docker-compose-ex1_hu9a03798a3e841d0697f0b226e0748e9f_74667_acf018bf0320033f44a6e0866cc8a06d.webp 760w,
               /post/django-project-deployed-by-docker/images/docker-compose-ex1_hu9a03798a3e841d0697f0b226e0748e9f_74667_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;/post/django-project-deployed-by-docker/images/docker-compose-ex1_hu9a03798a3e841d0697f0b226e0748e9f_74667_7facddb9863a97b78f5f7c2e912a258d.webp&#34;
               width=&#34;760&#34;
               height=&#34;105&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果需要更新项目代码重新部署，只需要更新代码后重启docker容器即可。(docker restart)&lt;/p&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;p&gt;如果希望容器内启动的Django项目访问宿主机的数据库（如MySQL），需要确保连接用户具有远程连接权限，如MySQL8.0+使用下面命令授予用户DEV远程连接数据库的权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;GRANT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;DEV&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WITH&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GRANT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FLUSH&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dusaiphoto.com/article/45/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Django-Docker容器化部署：Django-Docker部署&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
